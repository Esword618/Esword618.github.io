[{"categories":null,"content":"Geant4安装 ","date":"2023-11-24","objectID":"/2023/11/geant4_install/:0:0","series":null,"tags":null,"title":"Geant4_install","uri":"/2023/11/geant4_install/#"},{"categories":null,"content":" 基于wsl搭建ROOT环境ROOT安装 ","date":"2023-11-23","objectID":"/2023/11/first_post/:1:0","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#基于wsl搭建root环境"},{"categories":null,"content":" root文件操作","date":"2023-11-23","objectID":"/2023/11/first_post/:2:0","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#root文件操作"},{"categories":null,"content":" TTree文件格式暂时无法在飞书文档外展示此内容 一个 Entrie 为一个 Event 存储信息 Root 文件数据存储格式 TTree Branch-evtID Branch-nPhotons Branch-edep … Entrie-0 x1 y1 z1 … Entrie-1 x2 y2 z2 … … x3 y3 z3 … 以/junofs/users/luhq/juno/job/trunk190121/noOptical/rootdata/v0/data/M00.root文件为例 rootFilePath = \"../rootdata/M00.root\" f = TFile(rootFilePath) f.ls() ------------------Output--------------------------- TFile** ../rootdata/M00.root TFile* ../rootdata/M00.root KEY: TTree evt;1 evt KEY: TH1I stepno;1 step number of optical photons KEY: TTree geninfo;1 Generator Info KEY: TTree TT;1 Deposit Energy TT KEY: TTree TTDigit;1 PE TT KEY: TTree opticalparam;1 Optical Parameters KEY: TTree mu;1 muon events KEY: TTree muIso;1 isotope and neutron from muon spallation. KEY: TTree mufastn;1 muon induced fast neutron evt_tree = f.Get(\"evt\") # 获取 evt TTree # 打印 TTree 结构 evt_tree.Print() ------------------Output--------------------------- ****************************************************************************** *Tree :evt : evt * *Entries : 2997000 : Total = 374747740 bytes File Size = 24274338 * * : : Tree compression factor = 15.52 * ****************************************************************************** *Br 0 :evtID : evtID/I * *Entries : 2997000 : Total Size= 12079214 bytes File Size = 4292703 * *Baskets : 999 : Basket Size= 32000 bytes Compression= 2.81 * *............................................................................* *Br 1 :nPhotons : nPhotons/I * *Entries : 2997000 : Total Size= 12082223 bytes File Size = 158841 * *Baskets : 999 : Basket Size= 32000 bytes Compression= 75.94 * *............................................................................* *Br 2 :totalPE : totalPE/I * *Entries : 2997000 : Total Size= 12081220 bytes File Size = 157842 * *Baskets : 999 : Basket Size= 32000 bytes Compression= 76.41 * *............................................................................* ... 省略 # 输出 Branch 信息，从Entrie从0-9，感觉不实用 evt_tree.Scan(\"*\", \"\", \"\", 10, 0) ------------------Output--------------------------- *********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** * Row * Instance * evtID.evt * nPhotons. * totalPE.t * nPE.nPE * energy.en * hitTime.h * pmtID.pmt * PETrackID * edep.edep * edepX.ede * edepY.ede * edepZ.ede * isCerenko * isReemiss * isOrigina * OriginalO * nPMTs.nPM * nPE_byPMT * PMTID_byP * LocalPosX * LocalPosY * LocalPosZ * LocalDirX * LocalDirY * LocalDirZ * GlobalPos * GlobalPos * GlobalPos * BoundaryP * BoundaryP * BoundaryP * *********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************** * 0 * 0 * 0 * 0 * 0 * * * * * * 0 * 0 * 0 * 0 * * * * * 0 * * * * * * * * * * * * * * * * 1 * 0 * 1 * 0 * 0 * * * * * * 0 * 0 * 0 * 0 * * * * * 0 * * * * * * * * * * * * * * * * 2 * 0 * 2 * 0 * 0 * * * * * * 2397.4184 * 14677.919 * 2181.8515 * 7268.2172 * * * * * 0 * * * * * * * * * * * * * * * * 3 * 0 * 3 * 0 * 0 * * * * * * 0 * 0 * 0 * 0 * * * * * 0 * * * * * * * * * * * * * * * * 4 * 0 * 4 * 0 * 0 * * * * * * 0 * 0 * 0 * 0 * * * * * 0 * * * * * * * * * * * * * * * * 5 * 0 * 5 * 0 * 0 * * * * * * 4616.1396 * 2092.5810 * -13239.65 * -3952.277 * * * * * 0 * * * * * * * * * * * * * * * * 6 * 0 * 6 * 0 * 0 * * * * * * 0 * 0 * 0 * 0 * * * * * 0 * * * * * * * * * * * * * * * * 7 * 0 * 7 * 0 * 0 * * * * * * 0 * 0 * 0 * 0 * * * * * 0 * * * * * * * * * * * * * * * * 8 * 0 * 8 * 0 * 0 * * *","date":"2023-11-23","objectID":"/2023/11/first_post/:2:1","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#ttree文件格式"},{"categories":null,"content":" pyroot My first treetree-stydy-py-1.html 注意1（ctypes的类型要使用.value）ctypes的类型要使用.value from ctypes import c_double, c_int from ROOT import TFile, TTree,TCanvas guan = TFile(\"guan.root\", \"recreate\") ming = TTree(\"ming\", \"This is my first tree\") i = c_int(1) a = c_double(2.2) b = c_double(0.0) # \"i\" 为分支的名称，i为地址（c_int本身就是地址，C++ 是通过\u0026i）,\"i/I\"为i的类型 ming.Branch(\"i\", i, \"i/I\") ming.Branch(\"a\", a, \"a/D\") ming.Branch(\"b\", b, \"b/D\") for j in range(100): i.value = j # 通过.value属性更新 ctypes 变量的值 （注意） a.value = i.value * 0.1 b.value = j * j ming.Fill() ming.Write() guan.ls() TFile** guan.root TFile* guan.root OBJ: TTree ming This is my first tree : 0 at: 0x55986256e2d0 KEY: TTree ming;1 This is my first tree ming.Print() ****************************************************************************** *Tree :ming : This is my first tree * *Entries : 100 : Total = 4039 bytes File Size = 1499 * * : : Tree compression factor = 2.23 * ****************************************************************************** *Br 0 :i : i/I * *Entries : 100 : Total Size= 945 bytes File Size = 248 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.89 * *............................................................................* *Br 1 :a : a/D * *Entries : 100 : Total Size= 1353 bytes File Size = 329 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.64 * *............................................................................* *Br 2 :b : b/D * *Entries : 100 : Total Size= 1353 bytes File Size = 413 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.10 * *............................................................................* # 没有索引时，默认是最后一个 ming.Show() ======\u003e EVENT:-1 i = 99 a = 9.9 b = 9801 注意2（Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。）Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。 # Scan 函数在vscode的jupyter lab中使用有问题，jupyter lab在浏览器中打开是没有问题的（注意） ming.Scan(\"*\", \"\", \"\", 20, 0) ************************************************ * Row * i.i * a.a * b.b * ************************************************ * 0 * 0 * 0 * 0 * * 1 * 1 * 0.1 * 1 * * 2 * 2 * 0.2 * 4 * * 3 * 3 * 0.3 * 9 * * 4 * 4 * 0.4 * 16 * * 5 * 5 * 0.5 * 25 * * 6 * 6 * 0.6 * 36 * * 7 * 7 * 0.7 * 49 * * 8 * 8 * 0.8 * 64 * * 9 * 9 * 0.9 * 81 * * 10 * 10 * 1 * 100 * * 11 * 11 * 1.1 * 121 * * 12 * 12 * 1.2 * 144 * * 13 * 13 * 1.3 * 169 * * 14 * 14 * 1.4 * 196 * * 15 * 15 * 1.5 * 225 * * 16 * 16 * 1.6 * 256 * * 17 * 17 * 1.7 * 289 * * 18 * 18 * 1.8 * 324 * * 19 * 19 * 1.9 * 361 * ************************************************ %jsroot off # jsroot可以交互式地浏览ROOT生成的图形 c1 = TCanvas(\"c1\",\"test canvas\",400,300); ming.Draw(\"b:a\",\"\",\"colz\"); c1.Draw() c2 = TCanvas(\"c2\",\"b:a\",400,300) ming.Draw(\"a:b\",\"\",\"colz\") c2.Draw() guan.Close() My second treetree-stydy-py-2.html from ctypes import c_double, c_int, c_float,c_ushort from ROOT import TFile, TTree, TCanvas, TRandom f = TFile(\"f-file.root\",\"recreate\") t = TTree(\"t-tree\",\"esword second tree\") r = TRandom() px, py, pz = c_float(), c_float(), c_float() random = c_double() i = c_ushort() t.Branch(\"px\",px,\"px/F\") t.Branch(\"py\",py,\"py/F\") t.Branch(\"pz\",pz,\"pz/F\") t.Branch(\"random\",random,\"random/D\") t.Branch(\"i\",i,\"i/s\") for ii in range(10000): r.Rannor(px,py) pz.value = px.value**2 + py.value**2 random.value = r.Rndm() t.Fill() f.Write() t.Print() ****************************************************************************** *Tree :t-tree : esword second tree * *Entries : 10000 : Total = 223565 bytes File Size = 169026 * * : : Tree compression factor = 1.31 * ****************************************************************************** *Br 0 :px : px/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37172 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *............................................................................* *Br 1 :py : py/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37178 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *........","date":"2023-11-23","objectID":"/2023/11/first_post/:2:2","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#pyroot"},{"categories":null,"content":" pyroot My first treetree-stydy-py-1.html 注意1（ctypes的类型要使用.value）ctypes的类型要使用.value from ctypes import c_double, c_int from ROOT import TFile, TTree,TCanvas guan = TFile(\"guan.root\", \"recreate\") ming = TTree(\"ming\", \"This is my first tree\") i = c_int(1) a = c_double(2.2) b = c_double(0.0) # \"i\" 为分支的名称，i为地址（c_int本身就是地址，C++ 是通过\u0026i）,\"i/I\"为i的类型 ming.Branch(\"i\", i, \"i/I\") ming.Branch(\"a\", a, \"a/D\") ming.Branch(\"b\", b, \"b/D\") for j in range(100): i.value = j # 通过.value属性更新 ctypes 变量的值 （注意） a.value = i.value * 0.1 b.value = j * j ming.Fill() ming.Write() guan.ls() TFile** guan.root TFile* guan.root OBJ: TTree ming This is my first tree : 0 at: 0x55986256e2d0 KEY: TTree ming;1 This is my first tree ming.Print() ****************************************************************************** *Tree :ming : This is my first tree * *Entries : 100 : Total = 4039 bytes File Size = 1499 * * : : Tree compression factor = 2.23 * ****************************************************************************** *Br 0 :i : i/I * *Entries : 100 : Total Size= 945 bytes File Size = 248 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.89 * *............................................................................* *Br 1 :a : a/D * *Entries : 100 : Total Size= 1353 bytes File Size = 329 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.64 * *............................................................................* *Br 2 :b : b/D * *Entries : 100 : Total Size= 1353 bytes File Size = 413 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.10 * *............................................................................* # 没有索引时，默认是最后一个 ming.Show() ======\u003e EVENT:-1 i = 99 a = 9.9 b = 9801 注意2（Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。）Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。 # Scan 函数在vscode的jupyter lab中使用有问题，jupyter lab在浏览器中打开是没有问题的（注意） ming.Scan(\"*\", \"\", \"\", 20, 0) ************************************************ * Row * i.i * a.a * b.b * ************************************************ * 0 * 0 * 0 * 0 * * 1 * 1 * 0.1 * 1 * * 2 * 2 * 0.2 * 4 * * 3 * 3 * 0.3 * 9 * * 4 * 4 * 0.4 * 16 * * 5 * 5 * 0.5 * 25 * * 6 * 6 * 0.6 * 36 * * 7 * 7 * 0.7 * 49 * * 8 * 8 * 0.8 * 64 * * 9 * 9 * 0.9 * 81 * * 10 * 10 * 1 * 100 * * 11 * 11 * 1.1 * 121 * * 12 * 12 * 1.2 * 144 * * 13 * 13 * 1.3 * 169 * * 14 * 14 * 1.4 * 196 * * 15 * 15 * 1.5 * 225 * * 16 * 16 * 1.6 * 256 * * 17 * 17 * 1.7 * 289 * * 18 * 18 * 1.8 * 324 * * 19 * 19 * 1.9 * 361 * ************************************************ %jsroot off # jsroot可以交互式地浏览ROOT生成的图形 c1 = TCanvas(\"c1\",\"test canvas\",400,300); ming.Draw(\"b:a\",\"\",\"colz\"); c1.Draw() c2 = TCanvas(\"c2\",\"b:a\",400,300) ming.Draw(\"a:b\",\"\",\"colz\") c2.Draw() guan.Close() My second treetree-stydy-py-2.html from ctypes import c_double, c_int, c_float,c_ushort from ROOT import TFile, TTree, TCanvas, TRandom f = TFile(\"f-file.root\",\"recreate\") t = TTree(\"t-tree\",\"esword second tree\") r = TRandom() px, py, pz = c_float(), c_float(), c_float() random = c_double() i = c_ushort() t.Branch(\"px\",px,\"px/F\") t.Branch(\"py\",py,\"py/F\") t.Branch(\"pz\",pz,\"pz/F\") t.Branch(\"random\",random,\"random/D\") t.Branch(\"i\",i,\"i/s\") for ii in range(10000): r.Rannor(px,py) pz.value = px.value**2 + py.value**2 random.value = r.Rndm() t.Fill() f.Write() t.Print() ****************************************************************************** *Tree :t-tree : esword second tree * *Entries : 10000 : Total = 223565 bytes File Size = 169026 * * : : Tree compression factor = 1.31 * ****************************************************************************** *Br 0 :px : px/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37172 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *............................................................................* *Br 1 :py : py/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37178 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *........","date":"2023-11-23","objectID":"/2023/11/first_post/:2:2","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#my-first-tree"},{"categories":null,"content":" pyroot My first treetree-stydy-py-1.html 注意1（ctypes的类型要使用.value）ctypes的类型要使用.value from ctypes import c_double, c_int from ROOT import TFile, TTree,TCanvas guan = TFile(\"guan.root\", \"recreate\") ming = TTree(\"ming\", \"This is my first tree\") i = c_int(1) a = c_double(2.2) b = c_double(0.0) # \"i\" 为分支的名称，i为地址（c_int本身就是地址，C++ 是通过\u0026i）,\"i/I\"为i的类型 ming.Branch(\"i\", i, \"i/I\") ming.Branch(\"a\", a, \"a/D\") ming.Branch(\"b\", b, \"b/D\") for j in range(100): i.value = j # 通过.value属性更新 ctypes 变量的值 （注意） a.value = i.value * 0.1 b.value = j * j ming.Fill() ming.Write() guan.ls() TFile** guan.root TFile* guan.root OBJ: TTree ming This is my first tree : 0 at: 0x55986256e2d0 KEY: TTree ming;1 This is my first tree ming.Print() ****************************************************************************** *Tree :ming : This is my first tree * *Entries : 100 : Total = 4039 bytes File Size = 1499 * * : : Tree compression factor = 2.23 * ****************************************************************************** *Br 0 :i : i/I * *Entries : 100 : Total Size= 945 bytes File Size = 248 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.89 * *............................................................................* *Br 1 :a : a/D * *Entries : 100 : Total Size= 1353 bytes File Size = 329 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.64 * *............................................................................* *Br 2 :b : b/D * *Entries : 100 : Total Size= 1353 bytes File Size = 413 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.10 * *............................................................................* # 没有索引时，默认是最后一个 ming.Show() ======\u003e EVENT:-1 i = 99 a = 9.9 b = 9801 注意2（Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。）Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。 # Scan 函数在vscode的jupyter lab中使用有问题，jupyter lab在浏览器中打开是没有问题的（注意） ming.Scan(\"*\", \"\", \"\", 20, 0) ************************************************ * Row * i.i * a.a * b.b * ************************************************ * 0 * 0 * 0 * 0 * * 1 * 1 * 0.1 * 1 * * 2 * 2 * 0.2 * 4 * * 3 * 3 * 0.3 * 9 * * 4 * 4 * 0.4 * 16 * * 5 * 5 * 0.5 * 25 * * 6 * 6 * 0.6 * 36 * * 7 * 7 * 0.7 * 49 * * 8 * 8 * 0.8 * 64 * * 9 * 9 * 0.9 * 81 * * 10 * 10 * 1 * 100 * * 11 * 11 * 1.1 * 121 * * 12 * 12 * 1.2 * 144 * * 13 * 13 * 1.3 * 169 * * 14 * 14 * 1.4 * 196 * * 15 * 15 * 1.5 * 225 * * 16 * 16 * 1.6 * 256 * * 17 * 17 * 1.7 * 289 * * 18 * 18 * 1.8 * 324 * * 19 * 19 * 1.9 * 361 * ************************************************ %jsroot off # jsroot可以交互式地浏览ROOT生成的图形 c1 = TCanvas(\"c1\",\"test canvas\",400,300); ming.Draw(\"b:a\",\"\",\"colz\"); c1.Draw() c2 = TCanvas(\"c2\",\"b:a\",400,300) ming.Draw(\"a:b\",\"\",\"colz\") c2.Draw() guan.Close() My second treetree-stydy-py-2.html from ctypes import c_double, c_int, c_float,c_ushort from ROOT import TFile, TTree, TCanvas, TRandom f = TFile(\"f-file.root\",\"recreate\") t = TTree(\"t-tree\",\"esword second tree\") r = TRandom() px, py, pz = c_float(), c_float(), c_float() random = c_double() i = c_ushort() t.Branch(\"px\",px,\"px/F\") t.Branch(\"py\",py,\"py/F\") t.Branch(\"pz\",pz,\"pz/F\") t.Branch(\"random\",random,\"random/D\") t.Branch(\"i\",i,\"i/s\") for ii in range(10000): r.Rannor(px,py) pz.value = px.value**2 + py.value**2 random.value = r.Rndm() t.Fill() f.Write() t.Print() ****************************************************************************** *Tree :t-tree : esword second tree * *Entries : 10000 : Total = 223565 bytes File Size = 169026 * * : : Tree compression factor = 1.31 * ****************************************************************************** *Br 0 :px : px/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37172 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *............................................................................* *Br 1 :py : py/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37178 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *........","date":"2023-11-23","objectID":"/2023/11/first_post/:2:2","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#注意1ctypes的类型要使用value"},{"categories":null,"content":" pyroot My first treetree-stydy-py-1.html 注意1（ctypes的类型要使用.value）ctypes的类型要使用.value from ctypes import c_double, c_int from ROOT import TFile, TTree,TCanvas guan = TFile(\"guan.root\", \"recreate\") ming = TTree(\"ming\", \"This is my first tree\") i = c_int(1) a = c_double(2.2) b = c_double(0.0) # \"i\" 为分支的名称，i为地址（c_int本身就是地址，C++ 是通过\u0026i）,\"i/I\"为i的类型 ming.Branch(\"i\", i, \"i/I\") ming.Branch(\"a\", a, \"a/D\") ming.Branch(\"b\", b, \"b/D\") for j in range(100): i.value = j # 通过.value属性更新 ctypes 变量的值 （注意） a.value = i.value * 0.1 b.value = j * j ming.Fill() ming.Write() guan.ls() TFile** guan.root TFile* guan.root OBJ: TTree ming This is my first tree : 0 at: 0x55986256e2d0 KEY: TTree ming;1 This is my first tree ming.Print() ****************************************************************************** *Tree :ming : This is my first tree * *Entries : 100 : Total = 4039 bytes File Size = 1499 * * : : Tree compression factor = 2.23 * ****************************************************************************** *Br 0 :i : i/I * *Entries : 100 : Total Size= 945 bytes File Size = 248 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.89 * *............................................................................* *Br 1 :a : a/D * *Entries : 100 : Total Size= 1353 bytes File Size = 329 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.64 * *............................................................................* *Br 2 :b : b/D * *Entries : 100 : Total Size= 1353 bytes File Size = 413 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.10 * *............................................................................* # 没有索引时，默认是最后一个 ming.Show() ======\u003e EVENT:-1 i = 99 a = 9.9 b = 9801 注意2（Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。）Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。 # Scan 函数在vscode的jupyter lab中使用有问题，jupyter lab在浏览器中打开是没有问题的（注意） ming.Scan(\"*\", \"\", \"\", 20, 0) ************************************************ * Row * i.i * a.a * b.b * ************************************************ * 0 * 0 * 0 * 0 * * 1 * 1 * 0.1 * 1 * * 2 * 2 * 0.2 * 4 * * 3 * 3 * 0.3 * 9 * * 4 * 4 * 0.4 * 16 * * 5 * 5 * 0.5 * 25 * * 6 * 6 * 0.6 * 36 * * 7 * 7 * 0.7 * 49 * * 8 * 8 * 0.8 * 64 * * 9 * 9 * 0.9 * 81 * * 10 * 10 * 1 * 100 * * 11 * 11 * 1.1 * 121 * * 12 * 12 * 1.2 * 144 * * 13 * 13 * 1.3 * 169 * * 14 * 14 * 1.4 * 196 * * 15 * 15 * 1.5 * 225 * * 16 * 16 * 1.6 * 256 * * 17 * 17 * 1.7 * 289 * * 18 * 18 * 1.8 * 324 * * 19 * 19 * 1.9 * 361 * ************************************************ %jsroot off # jsroot可以交互式地浏览ROOT生成的图形 c1 = TCanvas(\"c1\",\"test canvas\",400,300); ming.Draw(\"b:a\",\"\",\"colz\"); c1.Draw() c2 = TCanvas(\"c2\",\"b:a\",400,300) ming.Draw(\"a:b\",\"\",\"colz\") c2.Draw() guan.Close() My second treetree-stydy-py-2.html from ctypes import c_double, c_int, c_float,c_ushort from ROOT import TFile, TTree, TCanvas, TRandom f = TFile(\"f-file.root\",\"recreate\") t = TTree(\"t-tree\",\"esword second tree\") r = TRandom() px, py, pz = c_float(), c_float(), c_float() random = c_double() i = c_ushort() t.Branch(\"px\",px,\"px/F\") t.Branch(\"py\",py,\"py/F\") t.Branch(\"pz\",pz,\"pz/F\") t.Branch(\"random\",random,\"random/D\") t.Branch(\"i\",i,\"i/s\") for ii in range(10000): r.Rannor(px,py) pz.value = px.value**2 + py.value**2 random.value = r.Rndm() t.Fill() f.Write() t.Print() ****************************************************************************** *Tree :t-tree : esword second tree * *Entries : 10000 : Total = 223565 bytes File Size = 169026 * * : : Tree compression factor = 1.31 * ****************************************************************************** *Br 0 :px : px/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37172 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *............................................................................* *Br 1 :py : py/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37178 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *........","date":"2023-11-23","objectID":"/2023/11/first_post/:2:2","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#注意2scan-函数在vscode的jupyter-lab中使用有问题在jupyter-lab中是没有问题的注意这里仅仅打印20行"},{"categories":null,"content":" pyroot My first treetree-stydy-py-1.html 注意1（ctypes的类型要使用.value）ctypes的类型要使用.value from ctypes import c_double, c_int from ROOT import TFile, TTree,TCanvas guan = TFile(\"guan.root\", \"recreate\") ming = TTree(\"ming\", \"This is my first tree\") i = c_int(1) a = c_double(2.2) b = c_double(0.0) # \"i\" 为分支的名称，i为地址（c_int本身就是地址，C++ 是通过\u0026i）,\"i/I\"为i的类型 ming.Branch(\"i\", i, \"i/I\") ming.Branch(\"a\", a, \"a/D\") ming.Branch(\"b\", b, \"b/D\") for j in range(100): i.value = j # 通过.value属性更新 ctypes 变量的值 （注意） a.value = i.value * 0.1 b.value = j * j ming.Fill() ming.Write() guan.ls() TFile** guan.root TFile* guan.root OBJ: TTree ming This is my first tree : 0 at: 0x55986256e2d0 KEY: TTree ming;1 This is my first tree ming.Print() ****************************************************************************** *Tree :ming : This is my first tree * *Entries : 100 : Total = 4039 bytes File Size = 1499 * * : : Tree compression factor = 2.23 * ****************************************************************************** *Br 0 :i : i/I * *Entries : 100 : Total Size= 945 bytes File Size = 248 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.89 * *............................................................................* *Br 1 :a : a/D * *Entries : 100 : Total Size= 1353 bytes File Size = 329 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.64 * *............................................................................* *Br 2 :b : b/D * *Entries : 100 : Total Size= 1353 bytes File Size = 413 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.10 * *............................................................................* # 没有索引时，默认是最后一个 ming.Show() ======\u003e EVENT:-1 i = 99 a = 9.9 b = 9801 注意2（Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。）Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。 # Scan 函数在vscode的jupyter lab中使用有问题，jupyter lab在浏览器中打开是没有问题的（注意） ming.Scan(\"*\", \"\", \"\", 20, 0) ************************************************ * Row * i.i * a.a * b.b * ************************************************ * 0 * 0 * 0 * 0 * * 1 * 1 * 0.1 * 1 * * 2 * 2 * 0.2 * 4 * * 3 * 3 * 0.3 * 9 * * 4 * 4 * 0.4 * 16 * * 5 * 5 * 0.5 * 25 * * 6 * 6 * 0.6 * 36 * * 7 * 7 * 0.7 * 49 * * 8 * 8 * 0.8 * 64 * * 9 * 9 * 0.9 * 81 * * 10 * 10 * 1 * 100 * * 11 * 11 * 1.1 * 121 * * 12 * 12 * 1.2 * 144 * * 13 * 13 * 1.3 * 169 * * 14 * 14 * 1.4 * 196 * * 15 * 15 * 1.5 * 225 * * 16 * 16 * 1.6 * 256 * * 17 * 17 * 1.7 * 289 * * 18 * 18 * 1.8 * 324 * * 19 * 19 * 1.9 * 361 * ************************************************ %jsroot off # jsroot可以交互式地浏览ROOT生成的图形 c1 = TCanvas(\"c1\",\"test canvas\",400,300); ming.Draw(\"b:a\",\"\",\"colz\"); c1.Draw() c2 = TCanvas(\"c2\",\"b:a\",400,300) ming.Draw(\"a:b\",\"\",\"colz\") c2.Draw() guan.Close() My second treetree-stydy-py-2.html from ctypes import c_double, c_int, c_float,c_ushort from ROOT import TFile, TTree, TCanvas, TRandom f = TFile(\"f-file.root\",\"recreate\") t = TTree(\"t-tree\",\"esword second tree\") r = TRandom() px, py, pz = c_float(), c_float(), c_float() random = c_double() i = c_ushort() t.Branch(\"px\",px,\"px/F\") t.Branch(\"py\",py,\"py/F\") t.Branch(\"pz\",pz,\"pz/F\") t.Branch(\"random\",random,\"random/D\") t.Branch(\"i\",i,\"i/s\") for ii in range(10000): r.Rannor(px,py) pz.value = px.value**2 + py.value**2 random.value = r.Rndm() t.Fill() f.Write() t.Print() ****************************************************************************** *Tree :t-tree : esword second tree * *Entries : 10000 : Total = 223565 bytes File Size = 169026 * * : : Tree compression factor = 1.31 * ****************************************************************************** *Br 0 :px : px/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37172 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *............................................................................* *Br 1 :py : py/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37178 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *........","date":"2023-11-23","objectID":"/2023/11/first_post/:2:2","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#my-second-tree"},{"categories":null,"content":" pyroot My first treetree-stydy-py-1.html 注意1（ctypes的类型要使用.value）ctypes的类型要使用.value from ctypes import c_double, c_int from ROOT import TFile, TTree,TCanvas guan = TFile(\"guan.root\", \"recreate\") ming = TTree(\"ming\", \"This is my first tree\") i = c_int(1) a = c_double(2.2) b = c_double(0.0) # \"i\" 为分支的名称，i为地址（c_int本身就是地址，C++ 是通过\u0026i）,\"i/I\"为i的类型 ming.Branch(\"i\", i, \"i/I\") ming.Branch(\"a\", a, \"a/D\") ming.Branch(\"b\", b, \"b/D\") for j in range(100): i.value = j # 通过.value属性更新 ctypes 变量的值 （注意） a.value = i.value * 0.1 b.value = j * j ming.Fill() ming.Write() guan.ls() TFile** guan.root TFile* guan.root OBJ: TTree ming This is my first tree : 0 at: 0x55986256e2d0 KEY: TTree ming;1 This is my first tree ming.Print() ****************************************************************************** *Tree :ming : This is my first tree * *Entries : 100 : Total = 4039 bytes File Size = 1499 * * : : Tree compression factor = 2.23 * ****************************************************************************** *Br 0 :i : i/I * *Entries : 100 : Total Size= 945 bytes File Size = 248 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.89 * *............................................................................* *Br 1 :a : a/D * *Entries : 100 : Total Size= 1353 bytes File Size = 329 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.64 * *............................................................................* *Br 2 :b : b/D * *Entries : 100 : Total Size= 1353 bytes File Size = 413 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.10 * *............................................................................* # 没有索引时，默认是最后一个 ming.Show() ======\u003e EVENT:-1 i = 99 a = 9.9 b = 9801 注意2（Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。）Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。 # Scan 函数在vscode的jupyter lab中使用有问题，jupyter lab在浏览器中打开是没有问题的（注意） ming.Scan(\"*\", \"\", \"\", 20, 0) ************************************************ * Row * i.i * a.a * b.b * ************************************************ * 0 * 0 * 0 * 0 * * 1 * 1 * 0.1 * 1 * * 2 * 2 * 0.2 * 4 * * 3 * 3 * 0.3 * 9 * * 4 * 4 * 0.4 * 16 * * 5 * 5 * 0.5 * 25 * * 6 * 6 * 0.6 * 36 * * 7 * 7 * 0.7 * 49 * * 8 * 8 * 0.8 * 64 * * 9 * 9 * 0.9 * 81 * * 10 * 10 * 1 * 100 * * 11 * 11 * 1.1 * 121 * * 12 * 12 * 1.2 * 144 * * 13 * 13 * 1.3 * 169 * * 14 * 14 * 1.4 * 196 * * 15 * 15 * 1.5 * 225 * * 16 * 16 * 1.6 * 256 * * 17 * 17 * 1.7 * 289 * * 18 * 18 * 1.8 * 324 * * 19 * 19 * 1.9 * 361 * ************************************************ %jsroot off # jsroot可以交互式地浏览ROOT生成的图形 c1 = TCanvas(\"c1\",\"test canvas\",400,300); ming.Draw(\"b:a\",\"\",\"colz\"); c1.Draw() c2 = TCanvas(\"c2\",\"b:a\",400,300) ming.Draw(\"a:b\",\"\",\"colz\") c2.Draw() guan.Close() My second treetree-stydy-py-2.html from ctypes import c_double, c_int, c_float,c_ushort from ROOT import TFile, TTree, TCanvas, TRandom f = TFile(\"f-file.root\",\"recreate\") t = TTree(\"t-tree\",\"esword second tree\") r = TRandom() px, py, pz = c_float(), c_float(), c_float() random = c_double() i = c_ushort() t.Branch(\"px\",px,\"px/F\") t.Branch(\"py\",py,\"py/F\") t.Branch(\"pz\",pz,\"pz/F\") t.Branch(\"random\",random,\"random/D\") t.Branch(\"i\",i,\"i/s\") for ii in range(10000): r.Rannor(px,py) pz.value = px.value**2 + py.value**2 random.value = r.Rndm() t.Fill() f.Write() t.Print() ****************************************************************************** *Tree :t-tree : esword second tree * *Entries : 10000 : Total = 223565 bytes File Size = 169026 * * : : Tree compression factor = 1.31 * ****************************************************************************** *Br 0 :px : px/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37172 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *............................................................................* *Br 1 :py : py/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37178 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *........","date":"2023-11-23","objectID":"/2023/11/first_post/:2:2","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#tcut筛选"},{"categories":null,"content":" pyroot My first treetree-stydy-py-1.html 注意1（ctypes的类型要使用.value）ctypes的类型要使用.value from ctypes import c_double, c_int from ROOT import TFile, TTree,TCanvas guan = TFile(\"guan.root\", \"recreate\") ming = TTree(\"ming\", \"This is my first tree\") i = c_int(1) a = c_double(2.2) b = c_double(0.0) # \"i\" 为分支的名称，i为地址（c_int本身就是地址，C++ 是通过\u0026i）,\"i/I\"为i的类型 ming.Branch(\"i\", i, \"i/I\") ming.Branch(\"a\", a, \"a/D\") ming.Branch(\"b\", b, \"b/D\") for j in range(100): i.value = j # 通过.value属性更新 ctypes 变量的值 （注意） a.value = i.value * 0.1 b.value = j * j ming.Fill() ming.Write() guan.ls() TFile** guan.root TFile* guan.root OBJ: TTree ming This is my first tree : 0 at: 0x55986256e2d0 KEY: TTree ming;1 This is my first tree ming.Print() ****************************************************************************** *Tree :ming : This is my first tree * *Entries : 100 : Total = 4039 bytes File Size = 1499 * * : : Tree compression factor = 2.23 * ****************************************************************************** *Br 0 :i : i/I * *Entries : 100 : Total Size= 945 bytes File Size = 248 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.89 * *............................................................................* *Br 1 :a : a/D * *Entries : 100 : Total Size= 1353 bytes File Size = 329 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.64 * *............................................................................* *Br 2 :b : b/D * *Entries : 100 : Total Size= 1353 bytes File Size = 413 * *Baskets : 1 : Basket Size= 32000 bytes Compression= 2.10 * *............................................................................* # 没有索引时，默认是最后一个 ming.Show() ======\u003e EVENT:-1 i = 99 a = 9.9 b = 9801 注意2（Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。）Scan 函数在vscode的jupyter lab中使用有问题，在jupyter lab中是没有问题的（注意），这里仅仅打印20行。 # Scan 函数在vscode的jupyter lab中使用有问题，jupyter lab在浏览器中打开是没有问题的（注意） ming.Scan(\"*\", \"\", \"\", 20, 0) ************************************************ * Row * i.i * a.a * b.b * ************************************************ * 0 * 0 * 0 * 0 * * 1 * 1 * 0.1 * 1 * * 2 * 2 * 0.2 * 4 * * 3 * 3 * 0.3 * 9 * * 4 * 4 * 0.4 * 16 * * 5 * 5 * 0.5 * 25 * * 6 * 6 * 0.6 * 36 * * 7 * 7 * 0.7 * 49 * * 8 * 8 * 0.8 * 64 * * 9 * 9 * 0.9 * 81 * * 10 * 10 * 1 * 100 * * 11 * 11 * 1.1 * 121 * * 12 * 12 * 1.2 * 144 * * 13 * 13 * 1.3 * 169 * * 14 * 14 * 1.4 * 196 * * 15 * 15 * 1.5 * 225 * * 16 * 16 * 1.6 * 256 * * 17 * 17 * 1.7 * 289 * * 18 * 18 * 1.8 * 324 * * 19 * 19 * 1.9 * 361 * ************************************************ %jsroot off # jsroot可以交互式地浏览ROOT生成的图形 c1 = TCanvas(\"c1\",\"test canvas\",400,300); ming.Draw(\"b:a\",\"\",\"colz\"); c1.Draw() c2 = TCanvas(\"c2\",\"b:a\",400,300) ming.Draw(\"a:b\",\"\",\"colz\") c2.Draw() guan.Close() My second treetree-stydy-py-2.html from ctypes import c_double, c_int, c_float,c_ushort from ROOT import TFile, TTree, TCanvas, TRandom f = TFile(\"f-file.root\",\"recreate\") t = TTree(\"t-tree\",\"esword second tree\") r = TRandom() px, py, pz = c_float(), c_float(), c_float() random = c_double() i = c_ushort() t.Branch(\"px\",px,\"px/F\") t.Branch(\"py\",py,\"py/F\") t.Branch(\"pz\",pz,\"pz/F\") t.Branch(\"random\",random,\"random/D\") t.Branch(\"i\",i,\"i/s\") for ii in range(10000): r.Rannor(px,py) pz.value = px.value**2 + py.value**2 random.value = r.Rndm() t.Fill() f.Write() t.Print() ****************************************************************************** *Tree :t-tree : esword second tree * *Entries : 10000 : Total = 223565 bytes File Size = 169026 * * : : Tree compression factor = 1.31 * ****************************************************************************** *Br 0 :px : px/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37172 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *............................................................................* *Br 1 :py : py/F * *Entries : 10000 : Total Size= 40627 bytes File Size = 37178 * *Baskets : 2 : Basket Size= 32000 bytes Compression= 1.08 * *........","date":"2023-11-23","objectID":"/2023/11/first_post/:2:2","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#vscode插件"},{"categories":null,"content":" uprootgithub link uproot 文档 import uproot uproot.default_library # 设置全局使用 awkward 作为数据操作对象 rootFilePath = \"../rootdata/M00.root\" file = uproot.open(rootFilePath) file.classnames() ## flie.ls() ------------------Output--------------------------- {'evt;1': 'TTree', 'stepno;1': 'TH1I', 'geninfo;1': 'TTree', 'TT;1': 'TTree', 'TTDigit;1': 'TTree', 'opticalparam;1': 'TTree', 'mu;1': 'TTree', 'muIso;1': 'TTree', 'mufastn;1': 'TTree'} file.keys() ------------------Output--------------------------- ['evt;1', 'stepno;1', 'geninfo;1', 'TT;1', 'TTDigit;1', 'opticalparam;1', 'mu;1', 'muIso;1', 'mufastn;1'] file.values() ------------------Output--------------------------- [\u003cTTree 'evt' (31 branches) at 0x7f8e9f70f2e0\u003e, \u003cTH1I (version 1) at 0x7f8e88483f40\u003e, \u003cTTree 'geninfo' (20 branches) at 0x7f8e88416ce0\u003e, \u003cTTree 'TT' (21 branches) at 0x7f8e88416d10\u003e, \u003cTTree 'TTDigit' (12 branches) at 0x7f8e8849c130\u003e, \u003cTTree 'opticalparam' (36 branches) at 0x7f8e88416cb0\u003e, \u003cTTree 'mu' (29 branches) at 0x7f8e88483fd0\u003e, \u003cTTree 'muIso' (30 branches) at 0x7f8e8834a7a0\u003e, \u003cTTree 'mufastn' (13 branches) at 0x7f8e883e4160\u003e] 操作TH file[\"stepno;1\"].to_hist() 操作TTree mu_tree = file.get(\"mu\") mu_tree.keys() ------------------Output--------------------------- ['evtID','MuMult','PDG', 'MuInitPosx', 'MuInitPosy', 'MuInitPosz', 'MuInitPx', 'MuInitPy', 'MuInitPz', 'MuInitKine', 'TrackLengthInRock', 'TrackLengthInVetoWater', 'TrackLengthInCDWater', 'TrackLengthInAcrylic', 'TrackLengthInSteel', 'TrackLengthInScint', 'ELossInRock', 'ELossInVetoWater', 'ELossInCDWater', 'ELossInAcrylic', 'ELossInSteel', 'ELossInScint', 'MuExitPosx', 'MuExitPosy', 'MuExitPosz', 'mustpMaterial', 'mustpx', 'mustpy', 'mustpz'] mu_tree.values() ------------------Output--------------------------- [\u003cTBranch 'evtID' at 0x7f8e8825e830\u003e, \u003cTBranch 'MuMult' at 0x7f8e8825efe0\u003e, \u003cTBranch 'PDG' at 0x7f8e8825f700\u003e, \u003cTBranch 'MuInitPosx' at 0x7f8e8825fe20\u003e, \u003cTBranch 'MuInitPosy' at 0x7f8e88278580\u003e, \u003cTBranch 'MuInitPosz' at 0x7f8e88278ca0\u003e, \u003cTBranch 'MuInitPx' at 0x7f8e882793c0\u003e, \u003cTBranch 'MuInitPy' at 0x7f8e88279ae0\u003e, \u003cTBranch 'MuInitPz' at 0x7f8e8827a200\u003e, \u003cTBranch 'MuInitKine' at 0x7f8e8827a920\u003e, \u003cTBranch 'TrackLengthInRock' at 0x7f8e8827b040\u003e, \u003cTBranch 'TrackLengthInVetoWater' at 0x7f8e8827b760\u003e, \u003cTBranch 'TrackLengthInCDWater' at 0x7f8e8827be80\u003e, \u003cTBranch 'TrackLengthInAcrylic' at 0x7f8e8828c5e0\u003e, \u003cTBranch 'TrackLengthInSteel' at 0x7f8e8828cd00\u003e, \u003cTBranch 'TrackLengthInScint' at 0x7f8e8828d420\u003e, \u003cTBranch 'ELossInRock' at 0x7f8e8828db40\u003e, \u003cTBranch 'ELossInVetoWater' at 0x7f8e8828e260\u003e, \u003cTBranch 'ELossInCDWater' at 0x7f8e8828e980\u003e, \u003cTBranch 'ELossInAcrylic' at 0x7f8e8828f0a0\u003e, \u003cTBranch 'ELossInSteel' at 0x7f8e8828f7c0\u003e, \u003cTBranch 'ELossInScint' at 0x7f8e8828fee0\u003e, \u003cTBranch 'MuExitPosx' at 0x7f8e882a4640\u003e, \u003cTBranch 'MuExitPosy' at 0x7f8e882a4d60\u003e, \u003cTBranch 'MuExitPosz' at 0x7f8e882a5480\u003e, \u003cTBranch 'mustpMaterial' at 0x7f8e882a5ba0\u003e, \u003cTBranch 'mustpx' at 0x7f8e882a62c0\u003e, \u003cTBranch 'mustpy' at 0x7f8e882a69e0\u003e, \u003cTBranch 'mustpz' at 0x7f8e882a7100\u003e] mu_tree.typenames() ------------------Output--------------------------- {'evtID': 'int32_t', 'MuMult': 'int32_t', 'PDG': 'int32_t[]', 'MuInitPosx': 'double[]', 'MuInitPosy': 'double[]', 'MuInitPosz': 'double[]', 'MuInitPx': 'double[]', 'MuInitPy': 'double[]', 'MuInitPz': 'double[]', 'MuInitKine': 'double[]', 'TrackLengthInRock': 'double[]', 'TrackLengthInVetoWater': 'double[]', 'TrackLengthInCDWater': 'double[]', 'TrackLengthInAcrylic': 'double[]', 'TrackLengthInSteel': 'double[]', 'TrackLengthInScint': 'double[]', 'ELossInRock': 'double[]', 'ELossInVetoWater': 'double[]', 'ELossInCDWater': 'double[]', 'ELossInAcrylic': 'double[]', 'ELossInSteel': 'double[]', 'ELossInScint': 'double[]', 'MuExitPosx': 'double[]', 'MuExitPosy': 'double[]', 'MuExitPosz': 'double[]', 'mustpMaterial': 'int32_t[]', 'mustpx': 'double[]', 'mustpy': 'double[]', 'mustpz': 'double[]'} mu_tree.show() ------------------Output--------------------------- name | typename | interpretation ---------------","date":"2023-11-23","objectID":"/2023/11/first_post/:2:3","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#uproot"},{"categories":null,"content":" uprootgithub link uproot 文档 import uproot uproot.default_library # 设置全局使用 awkward 作为数据操作对象 rootFilePath = \"../rootdata/M00.root\" file = uproot.open(rootFilePath) file.classnames() ## flie.ls() ------------------Output--------------------------- {'evt;1': 'TTree', 'stepno;1': 'TH1I', 'geninfo;1': 'TTree', 'TT;1': 'TTree', 'TTDigit;1': 'TTree', 'opticalparam;1': 'TTree', 'mu;1': 'TTree', 'muIso;1': 'TTree', 'mufastn;1': 'TTree'} file.keys() ------------------Output--------------------------- ['evt;1', 'stepno;1', 'geninfo;1', 'TT;1', 'TTDigit;1', 'opticalparam;1', 'mu;1', 'muIso;1', 'mufastn;1'] file.values() ------------------Output--------------------------- [","date":"2023-11-23","objectID":"/2023/11/first_post/:2:3","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#操作th"},{"categories":null,"content":" uprootgithub link uproot 文档 import uproot uproot.default_library # 设置全局使用 awkward 作为数据操作对象 rootFilePath = \"../rootdata/M00.root\" file = uproot.open(rootFilePath) file.classnames() ## flie.ls() ------------------Output--------------------------- {'evt;1': 'TTree', 'stepno;1': 'TH1I', 'geninfo;1': 'TTree', 'TT;1': 'TTree', 'TTDigit;1': 'TTree', 'opticalparam;1': 'TTree', 'mu;1': 'TTree', 'muIso;1': 'TTree', 'mufastn;1': 'TTree'} file.keys() ------------------Output--------------------------- ['evt;1', 'stepno;1', 'geninfo;1', 'TT;1', 'TTDigit;1', 'opticalparam;1', 'mu;1', 'muIso;1', 'mufastn;1'] file.values() ------------------Output--------------------------- [","date":"2023-11-23","objectID":"/2023/11/first_post/:2:3","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#操作ttree"},{"categories":null,"content":" uprootgithub link uproot 文档 import uproot uproot.default_library # 设置全局使用 awkward 作为数据操作对象 rootFilePath = \"../rootdata/M00.root\" file = uproot.open(rootFilePath) file.classnames() ## flie.ls() ------------------Output--------------------------- {'evt;1': 'TTree', 'stepno;1': 'TH1I', 'geninfo;1': 'TTree', 'TT;1': 'TTree', 'TTDigit;1': 'TTree', 'opticalparam;1': 'TTree', 'mu;1': 'TTree', 'muIso;1': 'TTree', 'mufastn;1': 'TTree'} file.keys() ------------------Output--------------------------- ['evt;1', 'stepno;1', 'geninfo;1', 'TT;1', 'TTDigit;1', 'opticalparam;1', 'mu;1', 'muIso;1', 'mufastn;1'] file.values() ------------------Output--------------------------- [","date":"2023-11-23","objectID":"/2023/11/first_post/:2:3","series":null,"tags":null,"title":"First_post","uri":"/2023/11/first_post/#uprootplotly-绘图"}]